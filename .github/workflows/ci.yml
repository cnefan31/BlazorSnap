name: CI - Validate Extension

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate manifest.json
      run: |
        echo "Validating manifest.json..."
        if ! jq empty src/manifest.json; then
          echo "‚ùå manifest.json is not valid JSON"
          exit 1
        fi
        echo "‚úÖ manifest.json is valid JSON"
        
    - name: Check required manifest fields
      run: |
        echo "Checking required manifest fields..."
        
        # Check manifest version
        if ! jq -e '.manifest_version' src/manifest.json > /dev/null; then
          echo "‚ùå Missing manifest_version"
          exit 1
        fi
        
        # Check name
        if ! jq -e '.name' src/manifest.json > /dev/null; then
          echo "‚ùå Missing name"
          exit 1
        fi
        
        # Check version
        if ! jq -e '.version' src/manifest.json > /dev/null; then
          echo "‚ùå Missing version"
          exit 1
        fi
        
        # Check description
        if ! jq -e '.description' src/manifest.json > /dev/null; then
          echo "‚ùå Missing description"
          exit 1
        fi
        
        echo "‚úÖ All required manifest fields present"
        
    - name: Validate file structure
      run: |
        echo "Checking file structure..."
        
        # Check for required files
        required_files=(
          "src/manifest.json"
          "src/background.js"
          "src/content.js"
          "src/popup.html"
          "src/popup.js"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required files present"
        
    - name: Check for icon files (Warning only)
      run: |
        echo "Checking for icon files..."
        
        icon_files=(
          "src/assets/icon16.png"
          "src/assets/icon48.png"
          "src/assets/icon128.png"
        )
        
        missing_icons=0
        for file in "${icon_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ö†Ô∏è Missing icon file: $file"
            missing_icons=1
          fi
        done
        
        if [ $missing_icons -eq 1 ]; then
          echo "‚ö†Ô∏è Some icon files are missing - extension will work but won't display properly"
          echo "üìù See src/assets/README.md for guidance on creating icons"
        else
          echo "‚úÖ All icon files present"
        fi
        
    - name: Test extension package creation
      run: |
        echo "Testing extension package creation..."
        cd src
        zip -r ../test-package.zip . -x "README.md" "assets/README.md"
        cd ..
        
        # Verify the package was created
        if [ ! -f "test-package.zip" ]; then
          echo "‚ùå Failed to create package"
          exit 1
        fi
        
        # Check package size (should be reasonable - 50MB limit for browser stores)
        size=$(wc -c < test-package.zip)
        if [ $size -gt 52428800 ]; then  # 50MB limit
          echo "‚ùå Package too large: ${size} bytes (max 50MB)"
          exit 1
        fi
        
        echo "‚úÖ Package created successfully (${size} bytes)"
        
    - name: Validate JavaScript syntax
      run: |
        echo "Validating JavaScript files..."
        
        # Check each JS file
        js_files=(
          "src/background.js"
          "src/content.js"
          "src/popup.js"
        )
        
        for file in "${js_files[@]}"; do
          echo "Checking $file..."
          if ! node -c "$file"; then
            echo "‚ùå Syntax error in $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All JavaScript files have valid syntax"
        
    - name: Validate HTML files
      run: |
        echo "Validating HTML files..."
        
        html_files=(
          "src/popup.html"
        )
        
        for file in "${html_files[@]}"; do
          echo "Checking $file..."
          # Basic HTML validation - check for required elements
          if ! grep -q "<html" "$file"; then
            echo "‚ùå $file missing <html> tag"
            exit 1
          fi
          if ! grep -q "<head" "$file"; then
            echo "‚ùå $file missing <head> tag"
            exit 1
          fi
          if ! grep -q "<body" "$file"; then
            echo "‚ùå $file missing <body> tag"
            exit 1
          fi
        done
        
        echo "‚úÖ All HTML files have valid structure"
        
    - name: Check manifest permissions
      run: |
        echo "Validating manifest permissions..."
        
        # Check that required permissions are present
        required_permissions=(
          "contextMenus"
          "scripting"
          "activeTab"
          "storage"
        )
        
        for permission in "${required_permissions[@]}"; do
          if ! jq -e --arg perm "$permission" '.permissions | index($perm)' src/manifest.json > /dev/null; then
            echo "‚ùå Missing required permission: $permission"
            exit 1
          fi
        done
        
        echo "‚úÖ All required permissions present"
        
    - name: Generate build info
      run: |
        echo "Extension Build Information:" > build-info.txt
        echo "==========================" >> build-info.txt
        echo "Commit: $GITHUB_SHA" >> build-info.txt
        echo "Branch: $GITHUB_REF_NAME" >> build-info.txt
        echo "Build Date: $(date -u)" >> build-info.txt
        echo "Extension Version: $(jq -r '.version' src/manifest.json)" >> build-info.txt
        echo "Manifest Version: $(jq -r '.manifest_version' src/manifest.json)" >> build-info.txt
        echo "Package Size Limit: 50MB" >> build-info.txt
        echo "Chrome Store: https://chromewebstore.google.com/detail/blazorsnap/iibbeljciecfkdbfbkhmdbbcegbkhoke" >> build-info.txt
        echo "Edge Store: https://microsoftedge.microsoft.com/addons/detail/blazorsnap/mkfecbnmpjbkoocagddgkgbaidnjkmkb" >> build-info.txt
        
        cat build-info.txt
